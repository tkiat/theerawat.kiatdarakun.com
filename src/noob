diff --git a/src/App/component/Content/page/Create.tsx b/src/App/component/Content/page/Create.tsx
index b7bdd85..15a96d3 100644
--- a/src/App/component/Content/page/Create.tsx
+++ b/src/App/component/Content/page/Create.tsx
@@ -100,6 +100,7 @@ export const Create = (): React.ReactElement => {
       })
     }
   }, [])
+  console.log(apps)
 
   return (apps === undefined || blogs === undefined || videos === undefined) ?
     <div className="no-split">Loading ...</div> :
@@ -120,7 +121,7 @@ export const Create = (): React.ReactElement => {
 
       <div className="split__content">
         <section>
-          <p>I display both <span>active items</span> and <span className="abandoned">abandoned items</span>.</p>
+          <p>I list both <span>active items</span> and <span className="abandoned">abandoned items</span>.</p>
         </section>
 
         <section id={`section-${page}-software`}>
diff --git a/src/App/component/Content/page/Digest.tsx b/src/App/component/Content/page/Digest.tsx
index 1f17283..ba0dbad 100644
--- a/src/App/component/Content/page/Digest.tsx
+++ b/src/App/component/Content/page/Digest.tsx
@@ -113,7 +113,7 @@ export const Digest = (): React.ReactElement => {
 
       <div className="split__content">
         <br />
-        I create this page for the sake of memory retention. I only list media that aligns with my&nbsp;
+        Here is the list of pieces of media that align with my&nbsp;
         <TooltipText text="ideals">
           <ul>
             <li>Available digitally</li>
diff --git a/src/App/component/Content/page/Events.tsx b/src/App/component/Content/page/Events.tsx
index 080148a..7e11079 100644
--- a/src/App/component/Content/page/Events.tsx
+++ b/src/App/component/Content/page/Events.tsx
@@ -5,6 +5,6 @@ import {TooltipText, TooltipTextWithDelay} from "../share/Tooltip"
 // import {Human} from "./Digest/Human"
 
 export const Events = (): React.ReactElement =>
-  <div className="page-events">
+  <div className="no-split">
     <p>TODO This will be the list of milestones and small events like trips.</p>
   </div>
diff --git a/src/App/component/Content/page/Story.tsx b/src/App/component/Content/page/Story.tsx
index 4223919..3a6969b 100644
--- a/src/App/component/Content/page/Story.tsx
+++ b/src/App/component/Content/page/Story.tsx
@@ -16,12 +16,14 @@ const page = "about-story"
 
 export const Story = (): React.ReactElement => {
   React.useEffect(() => {
+    console.log("story enter")
     initInPageNavButtons(document.querySelectorAll(`[id^="btn-${page}"]`))
 
     const sections = document.querySelectorAll(`[id^="section-${page}"]`)
     const observer = initIntObserver(sections)
 
     return () => {
+      console.log("story exit")
       sections.forEach(section => {
         observer.unobserve(section)
       })
diff --git a/src/App/component/NavMain.tsx b/src/App/component/NavMain.tsx
index 118376d..5b4ad05 100644
--- a/src/App/component/NavMain.tsx
+++ b/src/App/component/NavMain.tsx
@@ -18,10 +18,17 @@ export const NavMain = ({path, setPath}: P):
       <ItemContent
         key={x}
         path={x}
-        to={'/' + x + '/' + path.mapping[x]}
+        to={path.current === x ? window.location.pathname
+          : '/' + x + '/' + (path.mapping[x])}
         isActive={x === path.current}
         left={left(i)}
-        onclick={() => {setPath(d => {d.current = x})}}
+        onclick={() => {
+          setPath(d => {
+            const p = window.location.pathname
+            d.mapping[d.current] = p.substring(p.lastIndexOf('/') + 1)
+            d.current = x
+          })
+        }}
       />
     )}
     <ItemSidebar left={left(numDucks - 1)} />
diff --git a/src/App/component/NavSubTube.tsx b/src/App/component/NavSubTube.tsx
index c545c49..8eaa688 100644
--- a/src/App/component/NavSubTube.tsx
+++ b/src/App/component/NavSubTube.tsx
@@ -3,11 +3,11 @@ import {Updater} from 'use-immer'
 
 import {ReactComponent as Terminator} from "assets/valve/valve-terminator.svg"
 import {capitalize} from 'src/App/share/general'
-import {Path, pathObject} from 'src/App/share/path'
+import {Path, getSubpageIndex, pathObject} from 'src/App/share/path'
 
 import {NodeText} from './NavSubTube/NodeText'
 import {NodeValve} from './NavSubTube/NodeValve'
-import {moveCurrentNode} from './NavSubTube/moveCurrentNode'
+import {moveNode} from './NavSubTube/moveNode'
 
 const stepMs = 500
 
@@ -15,29 +15,41 @@ type P = {path: Path, setPath: Updater<Path>}
 export const NavSubTube = ({path, setPath}: P): React.ReactElement => {
   const callback = (to: number) => () =>
     setPath(d => {d.mapping[d.current] = pathObject[d.current][to]})
+  console.log(path)
+
   return (
     <nav className="nav-tube">
       <ul className="nav-tube__list">
         <Terminator />
         {pathObject[path.current].map((x, i) => {
-          const cur = pathObject[path.current].
+          const curInd = pathObject[path.current].
             findIndex(x => x === path.mapping[path.current])
           return (
           <React.Fragment key={x}>
             <li className="nav-tube__item">
               <NodeText
                 i={i}
-                cur={cur}
+                cur={curInd}
                 to={'/' + path.current + '/' + x}
-                onclick={() =>
-                  moveCurrentNode(cur * 2, i * 2, stepMs, callback(i))
+                onclick={() => {
+
+//                   setPath(d => {d.mapping[d.current] = pathObject[d.current][i]})
+
+//                   setPath(d => {d.mapping[d.current] = x})
+//                   moveNode(curInd * 2, i * 2, stepMs, () => () => {})
+                  const [curPage, curSubpage] =
+                    window.location.href.split("/").slice(-2)
+                  const curInd = getSubpageIndex(curPage, curSubpage)
+                  const destInd = getSubpageIndex(curPage, x)
+                  moveNode(curInd * 2, destInd * 2, stepMs, () => () => {})
+                }
                 }
                 word={capitalize(x)}
               />
             </li>
           {i < pathObject[path.current].length - 1 && (
             <li className="nav-tube__item">
-              <NodeValve i={i} cur={cur} />
+              <NodeValve i={i} cur={curInd} />
             </li>
           )}
           </React.Fragment>
diff --git a/src/App/component/NavSubTube/moveCurrentNode.ts b/src/App/component/NavSubTube/moveCurrentNode.ts
deleted file mode 100644
index 368d6ad..0000000
--- a/src/App/component/NavSubTube/moveCurrentNode.ts
+++ /dev/null
@@ -1,44 +0,0 @@
-import {appId} from 'src/App/share/elementId'
-import {moveWater} from './moveWater'
-
-const isPositionValid = (x: number): boolean => x >= 0 && x % 2 === 0
-
-export const moveCurrentNode = (
-  from: number,
-  to: number,
-  stepMs: number,
-  callback: Function
-): void => {
-  const m = document.getElementById(appId)
-
-  new Promise<void>((resolve, reject) => {
-    if (from === to) return {then: function() {}} // break promise chain
-    if (isPositionValid(from) && isPositionValid(to)) {
-      resolve()
-    } else {
-      reject('invalid input')
-    }
-  }).then(() => {
-    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
-      callback()
-      return {then: function() {}}
-    }
-  }).then(() =>
-    new Promise<void>((resolve, reject) => {
-      if (!m) {
-        callback()
-        reject('moveCurrentNode.ts: element of id "main" not found')
-      } else {
-        m.classList.toggle('waiting')
-        resolve()
-      }
-    })
-  ).then(() =>
-    new Promise<number>(resolve => resolve(moveWater(from, to, stepMs)))
-  ).then(delay => new Promise(resolve => {setTimeout(resolve, delay)})
-  ).then(() => {
-    callback()
-    m?.classList.toggle('waiting')
-  })
-  .catch(msg => console.error(msg))
-}
diff --git a/src/App/component/_Content.scss b/src/App/component/_Content.scss
index 1e7f041..22437ed 100644
--- a/src/App/component/_Content.scss
+++ b/src/App/component/_Content.scss
@@ -5,7 +5,6 @@
   position: absolute;
 
   font-size: 1rem;
-/*   padding: 0 10px; */
   margin-top: 10px;
   width: calc(100% - var(--sidebar-width));
   top: calc(var(--nav-tube-height) + 20px);
@@ -63,7 +62,7 @@
       padding:0;
       cursor: pointer;
       &:hover {
-        font-size: clamp(25px, 3vw, 35px);
+        font-size: clamp(30px, 3vw, 40px);
       }
     }
   }
@@ -87,13 +86,6 @@
     }
   }
 }
-/*   h1 { */
-/*     font-size: 1.563rem; */
-/*   } */
-/*   h2 { */
-/*     font-size: 1.25rem; */
-/*   } */
-
 /*   &--inside-water { */
 /*     top: 220px; */
 /*     @include m.hsl(color, 90, 0%, 95%); */
diff --git a/src/App/share/path.ts b/src/App/share/path.ts
index 7ec1e63..938525c 100644
--- a/src/App/share/path.ts
+++ b/src/App/share/path.ts
@@ -5,7 +5,6 @@ export type PathObject = typeof pathObject
 export const pathObject = {
   'about': ['hi', 'character', 'story'],
   'activity': ['create', 'digest', 'events'],
-//   'resume': [''],
 } as const
 
 const numMainPaths = Object.keys(pathObject).length
@@ -60,11 +59,20 @@ const mkLocalPath = (): Path => {
   return {current: fc, mapping: fm}
 }
 
+export const getSubpageIndex = (page: string, subpage: string) =>
+  pathObject[page].findIndex(i => i === subpage)
+
 // prioritize current url > local storage > first index
 export const mkPath = (): Path => adaptPathToUrl(mkLocalPath())
 
 export const storePath = (p: Path) => {
   localStorage.setItem(localCurrentPathKey, p.current)
-  mainPaths.map(x =>
-    localStorage.setItem(localMappingPrefix + x, p.mapping[x]))
+  mainPaths.map(x => {
+    if (x === p.current) {
+      const [subpage] = window.location.pathname.split("/").slice(-1)
+      localStorage.setItem(localMappingPrefix + x, subpage)
+    } else {
+      localStorage.setItem(localMappingPrefix + x, p.mapping[x])
+    }
+  })
 }
diff --git a/src/App/share/theme/base.ts b/src/App/share/theme/base.ts
index 84723b4..6dfbdfb 100644
--- a/src/App/share/theme/base.ts
+++ b/src/App/share/theme/base.ts
@@ -27,7 +27,7 @@ export const mayApplyBaseTheme = (): Promise<Status> => {
 
 export const mkCustomBaseTheme = (): BaseTheme => {
   const l = localStorage.getItem(localCustomBaseThemeKey)
-  return isType(l, baseThemes) ? l : 'sakura'
+  return isType(l, baseThemes) ? l : 'ocean'
 }
 
 export const storeCustomBaseTheme = (b: BaseTheme) =>
diff --git a/src/App/share/theme/themeObject.ts b/src/App/share/theme/themeObject.ts
index ed64447..0c5140c 100644
--- a/src/App/share/theme/themeObject.ts
+++ b/src/App/share/theme/themeObject.ts
@@ -43,7 +43,7 @@ export const mkGlobalStyle = (t: ThemeObject) => ({
 
 const mkTheme = (): Theme => {
   const l = localStorage.getItem(localThemeKey)
-  return isType(l, themes) ? l : 'sakura'
+  return isType(l, themes) ? l : 'ocean'
 }
 
 export const mkThemeObject = (): ThemeObject => {
diff --git a/src/main.tsx b/src/main.tsx
index 0e8af12..748e68c 100644
--- a/src/main.tsx
+++ b/src/main.tsx
@@ -12,9 +12,12 @@ const willShowSafariWarning = (): boolean => {
   return isSafari && localStorage.getItem(localSafariBypassKey) !== 'true'
 }
 
-ReactDOM.render(
-  <React.StrictMode>
-    {willShowSafariWarning() ? <SafariWarning /> : <App />}
-  </React.StrictMode>,
-  document.getElementById('root')
-)
+// TODO
+ReactDOM.render(<App />,document.getElementById('root'))
+
+// ReactDOM.render(
+//   <React.StrictMode>
+//     {willShowSafariWarning() ? <SafariWarning /> : <App />}
+//   </React.StrictMode>,
+//   document.getElementById('root')
+// )
